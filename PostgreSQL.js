/*! uw-db-postgresql - v0.0.5 - 2016-06-21 */function Connection(a,b){this.results=[],this.Client=a,this.end=function(){b()},this.addResult=function(a){this.results.push(a)},this.getLastResult=function(){return this.results[this.results.length-1]}}function PostgresSQL(a){var b=this;b.connection=null;var c=function(a,c,d){LOG.info(d||a);var e=Q.defer();try{b.connection.Client.query(a,c,function(a,c){a?(LOG.error(JSON.stringify(a)),e.reject(a)):(b.connection.addResult(c),e.resolve(b.connection))})}catch(f){LOG.error(f)}return e.promise};b.open=function(){var c=UTIL.format("postgres://%s:%s@%s/%s",a.user,a.password,a.ip,a.dbname),d=Q.defer();return PG.connect(c,function(a,e,f){if(a){LOG.error("Error creating connection ->"+a.message+" at "+c);var g=new Error;g.code=a.code,g.message="Error opening connection.",d.reject(g)}else b.connection=new Connection(e,f),d.resolve(b.connection)}),d.promise},b.begin=function(){return c("BEGIN",null,"BEGIN")},b.commit=function(){return c("COMMIT",null,"COMMIT")},b.rollback=function(){return c("ROLLBACK",null,"ROLLBACK")},b.rollbackAndRelease=function(){return c("ROLLBACK",null,"ROLLBACK").then(b.end)},b.end=function(){LOG.info("END"),b.connection.end()},b.query=function(a,b){return c(a,b)},b.showLastResult=function(){return function(a){return LOG.info("RESULTS"),a}},b.getTables=function(){var a="SELECT n.nspname,p.confkey, \t    c.relname, \t    f.attnum AS number, \t    f.attname AS name, \t    f.attnum, \t    f.attnotnull AS notnull, \t    pg_catalog.format_type(f.atttypid,f.atttypmod) AS type, \t    CASE \t\tWHEN p.contype = 'p' THEN 't' \t\tELSE 'f' \t    END AS primarykey, \t    CASE \t\tWHEN p.contype = 'u' THEN 't' \t\tELSE 'f' \t    END AS uniquekey, \t    CASE \t\tWHEN p.contype = 'f' THEN g.relname \t    END AS foreignkey, \t    CASE \t\tWHEN p.contype = 'f' THEN p.confkey \t    END AS foreignkey_fieldnum, \t    CASE \t\tWHEN p.contype = 'f' THEN g.relname \t    END AS foreignkey, \t    CASE \t\tWHEN p.contype = 'f' THEN p.conkey \t    END AS foreignkey_connnum, \t    CASE \t\tWHEN f.atthasdef = 't' THEN d.adsrc \t    END AS default FROM pg_attribute f     JOIN pg_class c ON c.oid = f.attrelid     JOIN pg_type t ON t.oid = f.atttypid     LEFT JOIN pg_attrdef d ON d.adrelid = c.oid AND d.adnum = f.attnum     LEFT JOIN pg_namespace n ON n.oid = c.relnamespace     LEFT JOIN pg_constraint p ON p.conrelid = c.oid AND f.attnum = ANY (p.conkey)     LEFT JOIN pg_class AS g ON p.confrelid = g.oid WHERE c.relkind = 'r'::char                  AND f.attnum >= 0      ORDER BY n.nspname,c.relname,f.attnum",c={information_schema:!0,pg_catalog:!0};return b.open().then(b.query.bind(null,a)).then(function(a){for(var b=a.getLastResult().rows,d={},e="",f=0;f<b.length;f++){var g=b[f];if(g.relname!=e){if(c[g.nspname])continue;e=g.relname,d[e]={name:e,fields:{}}}d[e].fields[g.name]={type:g.type,name:g.name,pk:"t"==g.primarykey,fk:null!=g.foreignkey,fktable:g.foreignkey,fkfield:g.foreignkey_fieldnum,id:g.number}}return d})["catch"](function(a){LOG.error(a),b.rollbackAndRelease()})["finally"](b.end)}}var UTIL=require("util"),PG=require("pg"),Q=require("q"),MODULE="PostgreSQL",LOG=require("uw-log").newInstance(MODULE);exports.newInstance=function(a){return new PostgresSQL(a)};